// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'data/local/photo_entity.dart';
import 'data/local/photos_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2245163705087138109),
      name: 'PhotoEntity',
      lastPropertyId: const IdUid(3, 2236556886729620709),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2937520206200309154),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1879299464835992365),
            name: 'page',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2236556886729620709),
            name: 'perPage',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8266799906813061970),
      name: 'PhotosEntity',
      lastPropertyId: const IdUid(6, 8291215643039235305),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3528855351150044904),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4387617391541827346),
            name: 'photographer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6659652859016560105),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8825210009566472181),
            name: 'imageOriginalUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7155185041406915276),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8291215643039235305),
            name: 'photographerImage',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8266799906813061970),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PhotoEntity: EntityDefinition<PhotoEntity>(
        model: _entities[0],
        toOneRelations: (PhotoEntity object) => [],
        toManyRelations: (PhotoEntity object) => {},
        getId: (PhotoEntity object) => object.id,
        setId: (PhotoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PhotoEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.page);
          fbb.addInt64(2, object.perPage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PhotoEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              page: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              perPage:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));

          return object;
        }),
    PhotosEntity: EntityDefinition<PhotosEntity>(
        model: _entities[1],
        toOneRelations: (PhotosEntity object) => [],
        toManyRelations: (PhotosEntity object) => {},
        getId: (PhotosEntity object) => object.id,
        setId: (PhotosEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PhotosEntity object, fb.Builder fbb) {
          final photographerOffset = fbb.writeString(object.photographer);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final imageOriginalUrlOffset =
              fbb.writeString(object.imageOriginalUrl);
          final descriptionOffset = fbb.writeString(object.description);
          final photographerImageOffset =
              fbb.writeString(object.photographerUrl);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, photographerOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addOffset(3, imageOriginalUrlOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, photographerImageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PhotosEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              photographer: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              imageUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              imageOriginalUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              photographerUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PhotoEntity] entity fields to define ObjectBox queries.
class PhotoEntity_ {
  /// see [PhotoEntity.id]
  static final id =
      QueryIntegerProperty<PhotoEntity>(_entities[0].properties[0]);

  /// see [PhotoEntity.page]
  static final page =
      QueryIntegerProperty<PhotoEntity>(_entities[0].properties[1]);

  /// see [PhotoEntity.perPage]
  static final perPage =
      QueryIntegerProperty<PhotoEntity>(_entities[0].properties[2]);
}

/// [PhotosEntity] entity fields to define ObjectBox queries.
class PhotosEntity_ {
  /// see [PhotosEntity.id]
  static final id =
      QueryIntegerProperty<PhotosEntity>(_entities[1].properties[0]);

  /// see [PhotosEntity.photographer]
  static final photographer =
      QueryStringProperty<PhotosEntity>(_entities[1].properties[1]);

  /// see [PhotosEntity.imageUrl]
  static final imageUrl =
      QueryStringProperty<PhotosEntity>(_entities[1].properties[2]);

  /// see [PhotosEntity.imageOriginalUrl]
  static final imageOriginalUrl =
      QueryStringProperty<PhotosEntity>(_entities[1].properties[3]);

  /// see [PhotosEntity.description]
  static final description =
      QueryStringProperty<PhotosEntity>(_entities[1].properties[4]);

  /// see [PhotosEntity.photographerUrl]
  static final photographerImage =
      QueryStringProperty<PhotosEntity>(_entities[1].properties[5]);
}
